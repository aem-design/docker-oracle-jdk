language: java

services:
  - 'docker'

before_install:
  - export IMAGE_NAME=$(grep imagename Dockerfile | sed -e 's/imagename="\(.*\)"/\1/')
  - export IMAGE_VERSION=$(grep version Dockerfile | sed -e 's/version="\(.*\)"/\1/')
  - export CONTAINER_TEST_IMAGE=$ORGANISATION_NAME/$IMAGE_NAME:$IMAGE_VERSION
  - echo IMAGE_NAME=$IMAGE_NAME
  - echo IMAGE_VERSION=$IMAGE_VERSION
  - echo "New Tag\:$IMAGE_NAME\:$IMAGE_VERSION"

#build
install:
  - docker build --pull -t $IMAGE_NAME:$IMAGE_VERSION .
  - docker tag $IMAGE_NAME:$IMAGE_VERSION $IMAGE_NAME:latest

#test
script:
  - export CONTAINER_OUTPUT=$(docker run $CONTAINER_TEST_IMAGE java -version 2>&1 | grep "java version" | sed -e 's/java version "\(.*\)"/\1/')
  - >-
    export JAVA_VERSION="8" &&
    export JAVA_VERSION_TIMESTAMP="2133151" &&
    export JAVA_DOWNLOAD_URL="http://www.oracle.com/technetwork/java/javase/downloads/jdk${JAVA_VERSION}-downloads-${JAVA_VERSION_TIMESTAMP}.html" &&
    export AUTO_JDKURLINFO=$(curl -LsN ${JAVA_DOWNLOAD_URL} | grep -m1 jdk\-${JAVA_VERSION}.*linux.*x64.*.rpm ) &&
    AUTO_JDKURL=$(echo ${AUTO_JDKURLINFO} | sed -e 's/.*"filepath":"\(http.*.rpm\)".*/\1/g' ) &&
    export TEXT_EXPECTED=$(echo ${AUTO_JDKURL} | sed -e "s/.*jdk-${JAVA_VERSION}u\(.*\)[-_]linux.*/\1/g")
  - if [[ "$CONTAINER_OUTPUT" != *$TEXT_EXPECTED* ]]; then echo "CONTAINER TEST DID NOT PASS" && exit 1; fi


#login to hub.docker
before_deploy:
  - if [[ $TRAVIS_BRANCH != "master" ]]; then echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin; fi

#deploy to hub.docker
deploy:
  provider: script
  script: docker push $IMAGE_NAME:$IMAGE_VERSION && docker push $IMAGE_NAME:latest
  on:
    branch: master

#update readme in hub.docker
after_deploy:
  - if [[ $TRAVIS_BRANCH != "master" ]]; then docker run --rm -v $(pwd)/README.md:/data/README.md -e DOCKERHUB_USERNAME=$DOCKER_USERNAME -e DOCKERHUB_PASSWORD=$DOCKER_PASSWORD -e DOCKERHUB_REPO_PREFIX=$ORGANISATION_NAME -e DOCKERHUB_REPO_NAME=$IMAGE_NAME sheogorath/readme-to-dockerhub; fi
